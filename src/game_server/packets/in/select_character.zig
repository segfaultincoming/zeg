const std = @import("std");
const types = @import("packets").types;
const Game = @import("game");
const gs = @import("../../main.zig");

const PacketType = types.PacketType;
const PacketResponse = types.PacketResponse;

pub const SelectCharacter = struct {
    pub const header: PacketType = PacketType.C1;
    pub const code: u8 = 0xf3;
    pub const sub_code: u8 = 0x03;

    pub fn process(game_server: *const gs.GameServer, payload: []const u8) !PacketResponse {
        const character_name = payload[0..10];

        // TODO
        _ = game_server;
        _ = character_name;

        // TODO:
        // 1. C3/C4 packets should be encrypted.
        // 2. Find a good way to send multiple packets at once.
        const reponse_data = [_]u8 {
            // Skill Added
            0xC1, 0x0A, 0xF3, 0x11, 0xFE, 0x00, 0x00, 0x16, 0x00, 0x00,
            // Skill Added
            0xC1, 0x0A, 0xF3, 0x11, 0xFE, 0x00, 0x01, 0x4C, 0x00, 0x00,
            // Character Information (extended)
            0xC3, 0x48, 0xF3, 0x03, 0x8F, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x87, 0x42, 0x48, 0x00, 0x00, 0x00, 0x00, 0x17, 0x18, 0x04, 0x90, 0x6B, 0x03, 0xAC, 0x01, 0x40, 0x01, 0x19, 0x00, 0x0A, 0x00, 0x59, 0x03, 0x59, 0x03, 0xB0, 0x00, 0xB0, 0x00, 0xEB, 0x10, 0xEB, 0x10, 0x48, 0x00, 0x91, 0x00, 0x00, 0x00, 0x80, 0x96, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00,
            // Character Inventory
            0xC4, 0x02, 0xEB, 0xF3, 0x10, 0x39, 0x00, 0x00, 0x6C, 0x14, 0x60, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x05, 0xEC, 0x27, 0x60, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x06, 0x6C, 0x28, 0x60, 0x00, 0x70, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x06, 0x6C, 0x28, 0x48, 0x00, 0x80, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x04, 0x06, 0x6C, 0x28, 0x41, 0x00, 0x90, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0x06, 0x6C, 0x28, 0x50, 0x00, 0xA0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x06, 0x06, 0x6C, 0x28, 0x44, 0x00, 0xB0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x05, 0x68, 0xC8, 0x01, 0x00, 0xC0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x08, 0x25, 0x80, 0xFF, 0x00, 0x00, 0xD0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0C, 0x0D, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0D, 0x0D, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0E, 0x0D, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x0D, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x10, 0x0D, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x11, 0x0D, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x12, 0x0D, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x13, 0x0D, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x14, 0x0E, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x15, 0x0E, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x16, 0x0E, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x17, 0x0E, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x18, 0x0E, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x19, 0x0E, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1A, 0x0E, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1B, 0x0E, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1C, 0x10, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1D, 0x10, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1E, 0x10, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x10, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x20, 0x10, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x21, 0x10, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x22, 0x10, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x23, 0x10, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x24, 0x00, 0x00, 0x03, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x25, 0x01, 0x00, 0x03, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x26, 0x02, 0x00, 0x03, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x27, 0x03, 0x00, 0x03, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x28, 0x04, 0x00, 0x03, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x29, 0x05, 0x00, 0x03, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x2A, 0x06, 0x00, 0x03, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x2B, 0x09, 0x00, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x2C, 0x23, 0x00, 0x03, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x2D, 0x24, 0x00, 0x03, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x2E, 0x25, 0x00, 0x03, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x2F, 0x0C, 0x00, 0x01, 0x00, 0x00, 0xC0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x30, 0x0E, 0x00, 0x01, 0x00, 0x00, 0xC0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x31, 0x13, 0x00, 0x01, 0x00, 0x00, 0xC0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x32, 0x2C, 0x00, 0x01, 0x00, 0x00, 0xC0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x34, 0x14, 0x00, 0x1E, 0x00, 0x00, 0xD0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x35, 0x08, 0x00, 0x32, 0x3F, 0x00, 0xD0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x36, 0x09, 0x00, 0x32, 0x3F, 0x00, 0xD0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x37, 0x0C, 0x00, 0x32, 0x3F, 0x00, 0xD0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x38, 0x07, 0x00, 0x01, 0x00, 0x00, 0xC0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3B, 0x03, 0x80, 0xFF, 0x00, 0x00, 0xD0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3C, 0x01, 0x00, 0xFF, 0x00, 0x00, 0xD0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xD0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x46, 0x02, 0x00, 0xFF, 0x00, 0x00, 0xD0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            // Quest State List
            0xC1, 0x05, 0xF6, 0x1A, 0x00,
            // Server Message
            0xC1, 0x29, 0x0D, 0x01, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x74, 0x65, 0x73, 0x74, 0x33, 0x30, 0x30, 0x44, 0x6B, 0x20, 0x65, 0x6E, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x61, 0x6D, 0x65, 0x2E, 0x00,
            // Add Character to Scope (extended)
            0xC2, 0x00, 0x29, 0x12, 0x01, 0x02, 0x00, 0x8F, 0x7C, 0x30, 0x00, 0x05, 0x66, 0x66, 0x6B, 0x1B, 0x6D, 0xB6, 0x03, 0xF8, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x33, 0x30, 0x30, 0x44, 0x6B, 0x00, 0x8F, 0x7C, 0x00, 0x00,
            // Add NPC to Scope (extended)
            0xC2, 0x00, 0x2D, 0x13, 0x04, 0x02, 0x11, 0x01, 0x73, 0x82, 0x7E, 0x82, 0x7E, 0x30, 0x00, 0x02, 0x0D, 0x01, 0x01, 0x82, 0x80, 0x82, 0x80, 0x30, 0x00, 0x03, 0x3A, 0x02, 0x38, 0x83, 0x8B, 0x83, 0x8B, 0x20, 0x00, 0x02, 0x10, 0x02, 0x1F, 0x8D, 0x8F, 0x8D, 0x8F, 0x20, 0x00,
            // Weather Status Update
            0xC1, 0x04, 0x0F, 0x25,
            // Map Event State (Golden Dragon)
            0xC1, 0x05, 0x0B, 0x00, 0x03,
            // Map Event State (Red Dragon)
            0xC1, 0x05, 0x0B, 0x00, 0x01,
            // Messenger Initialization
            0xC2, 0x00, 0x07, 0xC0, 0x00, 0x32, 0x00,
            // Current Mana and Ability
            0xC1, 0x08, 0x27, 0xFF, 0x00, 0xB0, 0x00, 0x52,
        };

        return PacketResponse{
            .code = .Success,
            .packet = &reponse_data,
        };
    }
};
